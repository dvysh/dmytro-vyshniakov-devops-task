#!/usr/bin/env python

import datetime
import sys
import os
import psutil

psutil.PROCFS_PATH="/proc-host"

if os.path.isdir("/proc-host/sys") == False:
    print("The script is running outside a docker container or /proc-host volume is not mounted")
    psutil.PROCFS_PATH="/proc"

params = {
    "cpu": ('idle', 'user', 'guest', 'iowait', 'steal', 'system'),
    "mem": ('total', 'used', 'free', 'shared'),
    "swap": ('total', 'used', 'free'),
}

functions = {
    "cpu": lambda: psutil.cpu_times_percent(interval=1),
    "mem": lambda: psutil.virtual_memory(),
    "swap": lambda: psutil.swap_memory(),
}


def get_metrics(monitype):
    """Return dict with system parameters"""

    data = functions[monitype]()
    usage = {key: value for key, value in data._asdict().items() if key in params[monitype]}
    return usage

def get_proc():
    for proc in psutil.process_iter():
        try:
            pinfo = proc.as_dict(attrs=['pid', 'name', 'username'])
        except psutil.NoSuchProcess:
            pass
        else:
            print(pinfo)

if len(sys.argv)<2:
    print("Please enter a system parameter: ./metrics  <cpu|mem|proc|all>")
elif sys.argv[1] == 'cpu':
    print('\n\n====== {} ======'.format(datetime.datetime.now()))
    output = get_metrics('cpu')
    for attribute, value in output.items():
        print('system.cpu.{} {}'.format(attribute, value))
elif sys.argv[1] == 'mem':
    print('\n\n====== {} ======'.format(datetime.datetime.now()))
    output = get_metrics('mem')
    for attribute, value in output.items():
        print('virtual {} {}'.format(attribute, value))
    output = get_metrics('swap')
    for attribute, value in output.items():
        print('swap {} {}'.format(attribute, value))
elif sys.argv[1] == 'proc':
    get_proc()
elif sys.argv[1] == 'all':
    print('\n\n====== {} ======'.format(datetime.datetime.now()))
    output = get_metrics('cpu')
    for attribute, value in output.items():
        print('system.cpu.{} {}'.format(attribute, value))
    output = get_metrics('mem')
    for attribute, value in output.items():
        print('virtual {} {}'.format(attribute, value))
    output = get_metrics('swap')
    for attribute, value in output.items():
        print('swap {} {}'.format(attribute, value))
    get_proc()
else: print("Please enter a correct system parameter: ./metrics  <cpu|mem|proc|all>")
